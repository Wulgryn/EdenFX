!!!!
https://www.youtube.com/@simondev758
!!!!

glad/gl doc https://registry.khronos.org/OpenGL-Refpages/gl4/html/

!!https://www.youtube.com/@Vercidium/videos

!!!https://registry.khronos.org/OpenGL-Refpages/

!!perlin noise

!!!https://www.youtube.com/watch?v=ob3VwY4JyzE

??https://www.youtube.com/watch?v=fv-wlo8yVhk

??https://developer.nvidia.com/tools-overview-old

???chaos theory
---------------------------------
Pos class:

Pozíciókat tartalmaz(double, int egyszerre). Ha intként adjuk be, beállítja az intet és a doublet is így ugyanz lesz mindkettő, de ha double-t adunk meg akkor a double double értéket fog tartalmazni, de az int integert íyg mindkettővel könnyen dolgozhatunk.

pl.:

pos(1,2);
pos.iX //=1
pos.iY //=2
pos.dX //=1.0
pos.dY //=2.0

pos(1.1, 2.2);
pos.iX //=1
pos.iY //=2
pos.dX //=1.1
pos.dY //=2.2

-----------------------------
\c a log ban (loginfo) és mint a %d, ahanyadik utána, oda rakja azt a színt

logInfo("experimental \cversion 0.0.1 alpha", ConsoleColors.YELLOW);

=az experimental után a version 0.0.1 alpha sárga lesz

----------------------------
class a files és a directories hoz/hez

ha meglesz akkor ha fájlt olvasok be vagy készítek akár a classt is vissza adhatnák

----------------------------
safe_file reading

valami olyasmi, hogy külön szedni a try/catch és a nem try/catch file kezelést (az előbbi a safe_file)

----------------------------
beépíteni az NTFS DATA STREAMET hogy könnyebb legyen használni

az amikor egy fájl alatt egy másik fájl van bár nemtudom linuxon működik e

-----------------------------
a file kezeléshez hozzáadni egy writeLine és readLine nem sorok, csak sor

az appendet is bele lehetne rakni

-----------------------------
ha valamit meg akarok változtatni, akkor majd csinálok egy deprecated.hpp és abba rakom a régit és kommentbe felé írom mi lett az új helyette

----------------------------

real time shader visualisation és szerkesztés

-----------------------------

saját string minden érték befogadásával, egyéb extensionokkal

const char* + string types

"asd" + 10 <- oké = "asd10"
------------------------------
https://www.khronos.org/opengl/wiki/Getting_Started

manual opengl creation
-----------------------------

Shaderek indexelése, hogy az alap shadert kapja minden object de igazából csak az indexét
Ha pedig valami változtatást csinálunk a shaderben akkor regisztrálja mint más shader és kicseréli a linkelt indexet
-----------------------------
perlin noise visualisation
-----------------------------
CPU CORE THREADING
másik "logikai" magon futtatni a szálat

és akár saját thread classt írni amiben be lehet állítani egyéb dolgokat rajta
pl:
logikai mag affinitás(kiválasztás)
max cpu useage
-----------------------------
2 update threadet csinálni:
mivel ha külön threadból nézem a getKey-t akkor furán működik így majd később egy upfate function-t ami nem threadből indul
hanem csak simán meg lesz hívva meg egy másikat ami threadből indul és talán azt is belehetne állítani,
 hogy másik magon fusson
-----------------------------
majd kell egy input overhaul a windowhoz